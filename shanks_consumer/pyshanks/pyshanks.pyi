# type: ignore[unused-arg] pylint: disable=unused-argument

from typing import TypeVar
from abc import abstractmethod
from enum import Enum

T = TypeVar("T", bound=float)
K = TypeVar("K", bound=int)

class RemainderType(Enum):
    u_variant: int
    t_variant: int
    v_variant: int
    t_wave_variant: int
    v_wave_variant: int

class NumeratorType(Enum):
    rho_variant: int
    generalized_variant: int
    gamma_rho_variant: int

class SeriesBase:
    def __call__(self, n: K) -> T: ...
    def S_n(self, n: K) -> T: ...
    def get_sum(self) -> T: ...
    def get_x(self) -> T: ...

class ExpSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class CosSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class SinSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class CoshSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class SinhSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class BinSeries(SeriesBase):
    def __init__(self, a: T, b: T) -> None: ...

class FourArctanSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class Ln1mxSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class MeanSinhSinSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class ExpSquaredErfSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class XmbJbTwoSeries(SeriesBase):
    def __init__(self, x: T, b: K) -> None: ...

class HalfAsinTwoXSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class Inverse1mxSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class X_1mx_SquaredSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class ErfSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class MFact1mxMp1InverseSeries(SeriesBase):
    def __init__(self, x: T, m: K) -> None: ...

class InvSqrt1m4xSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class OneTwelfth3x2Pi2Series(SeriesBase):
    def __init__(self, x: T) -> None: ...

class XTwelfthX2Pi2Series(SeriesBase):
    def __init__(self, x: T) -> None: ...

class Ln2Series(SeriesBase):
    def __init__(self, x: T) -> None: ...

class OneSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class MinusOneQuarterSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class Pi3Series(SeriesBase):
    def __init__(self, x: T) -> None: ...

class Pi4Series(SeriesBase):
    def __init__(self, x: T) -> None: ...

class PiSquared6MinusOneSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class ThreeMinusPiSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class OneTwelfthSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class EighthPiMOneThirdSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class OneThirdPiSquaredMNineSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class FourLn2M3Series(SeriesBase):
    def __init__(self, x: T) -> None: ...

class ExpMCosXSinsinXSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class PiFourMinusLn2HalfedSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class FivePiTwelveSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class XTwoSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class PiSixMinHalfSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class XTwoThroughtSquaresSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class MinusOneNedInNSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class MinusOneNFactNInNSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class LnXPlusOneXMinusOneHalfedSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class TwoArcsinSquareXHalfedSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class PiSquaredTwelveSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class PiCubed32Series(SeriesBase):
    def __init__(self, x: T) -> None: ...

class MinusThreePlusLn3ThreeDividedTwoPlusTwoLn2Series(SeriesBase):
    def __init__(self, x: T) -> None: ...

class TwoLn2Series(SeriesBase):
    def __init__(self, x: T) -> None: ...

class PiXMultiE_XpiPlusEMinusXpiDividedE_XpiMinusEMinusXpiMinusOneSeries(
    SeriesBase
):
    def __init__(self, x: T) -> None: ...

class PiMinusX2Series(SeriesBase):
    def __init__(self, x: T) -> None: ...

class HalfMultiLn1Div2Multi1MinusCosxSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class HalfMinusSinxMultiPi4Series(SeriesBase):
    def __init__(self, x: T) -> None: ...

class Ln1PlusSqrt1PlusXsquareMinusLn2Series(SeriesBase):
    def __init__(self, x: T) -> None: ...

class LnCosxSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class LnSinxMinusLnXSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class Pi8CosxSquareMinus1Div3CosxSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class SqrtOneminusSqrtoneminusxDivXSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class OneMinusSqrt1minus4xDiv2xSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class ArcsinXMinusXSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class PiXMinusXSquareAndXSquareMinusThreePiXPlusTwoPiSquareSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class AbsSinXMinus2DivPiSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class PiMinus3pi4AndPiMinusXMinus3pi4Series(SeriesBase):
    def __init__(self, x: T) -> None: ...

class Minus3Div4OrXMinus3Div4Series(SeriesBase):
    def __init__(self, x: T) -> None: ...

class TenMinusXSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class XSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class MinusXMinusPi4OrMinusPi4Series(SeriesBase):
    def __init__(self, x: T) -> None: ...

class OneDivTwoMinusXMultiThreePlusXSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class SiXSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class CiXSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class RiemannZetaFuncSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class RiemannZetaFuncXmin1DivRiemannZetaFuncXSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class Xsquareplus3DivXsquareplus2multixMinus1Series(SeriesBase):
    def __init__(self, x: T) -> None: ...

class ArcsinXSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class ArctgXSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class KXSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class EXSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class Sqrt1plusXSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class LambertWFuncSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class IncompleteGammaFuncSeries(SeriesBase):
    def __init__(self, x: T, a: T) -> None: ...

class SeriesWithLnNumber1(SeriesBase):
    def __init__(self, x: T) -> None: ...

class SeriesWithLnNumber2(SeriesBase):
    def __init__(self, x: T) -> None: ...

class PiSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class XMinSqrtXSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class ArctanX2Series(SeriesBase):
    def __init__(self, x: T) -> None: ...

class Ln1px4Series(SeriesBase):
    def __init__(self, x: T) -> None: ...

class SinX2Series(SeriesBase):
    def __init__(self, x: T) -> None: ...

class ArctanX3Series(SeriesBase):
    def __init__(self, x: T) -> None: ...

class ArcsinX2Series(SeriesBase):
    def __init__(self, x: T) -> None: ...

class Ln1MinusX2Series(SeriesBase):
    def __init__(self, x: T) -> None: ...

class ArtanhXSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class ArcsinhXSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class CosX2Series(SeriesBase):
    def __init__(self, x: T) -> None: ...

class SinhX2Series(SeriesBase):
    def __init__(self, x: T) -> None: ...

class ArctanhX2Series(SeriesBase):
    def __init__(self, x: T) -> None: ...

class Cos3xMinus1DivXsquareSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class TwoDegreeXSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class Sqrt1plusXMinus1MinusXDiv2Series(SeriesBase):
    def __init__(self, x: T) -> None: ...

class Ln13MinusLn7Div7Series(SeriesBase):
    def __init__(self, x: T) -> None: ...

class JaXSeries(SeriesBase):
    def __init__(self, x: T, a: T) -> None: ...

class OneDivSqrt2SinXDivSqrt2Series(SeriesBase):
    def __init__(self, x: T) -> None: ...

class Ln1plusXDiv1plusX2Series(SeriesBase):
    def __init__(self, x: T) -> None: ...

class CosSqrtXSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class Ln1PlusX3Series(SeriesBase):
    def __init__(self, x: T) -> None: ...

class XDiv1minXSeries(SeriesBase):
    def __init__(self, x: T) -> None: ...

class XDiv1minX2Series(SeriesBase):
    def __init__(self, x: T) -> None: ...

class GammaSeries(SeriesBase):
    def __init__(self, x: T, a: T) -> None: ...

class SeriesAcceleration:
    @abstractmethod
    def __init__(self, series: SeriesBase) -> None: ...
    def __call__(self, arg1: K, arg2: K) -> T: ...

class ShanksTransform(SeriesAcceleration):
    def __init__(self, series: SeriesBase) -> None: ...

class ShanksTransformAlternating(SeriesAcceleration):
    def __init__(self, series: SeriesBase) -> None: ...

class BrezinskiThetaAlgorithm(SeriesAcceleration):
    def __init__(self, series: SeriesBase) -> None: ...

class ChangWynnAlgorithm(SeriesAcceleration):
    def __init__(self, series: SeriesBase) -> None: ...

class DrummondDAlgorithm(SeriesAcceleration):
    def __init__(
        self,
        series: SeriesBase,
        variant: RemainderType = ...,
        useRecFormulas: bool = ...,
    ) -> None: ...

class FordSidiAlgorithmTwo(SeriesAcceleration):
    def __init__(self, series: SeriesBase) -> None: ...

class FordSidiAlgorithmThree(SeriesAcceleration):
    def __init__(self, series: SeriesBase) -> None: ...

class LevinLAlgorithm(SeriesAcceleration):
    def __init__(
        self, series: SeriesBase, useRecFormulas: bool = ..., beta: T = ...
    ) -> None: ...
    def __call__(self, n: K, m: K) -> T: ...

class LevinSidiMAlgorithm(SeriesAcceleration):
    def __init__(
        self, series: SeriesBase, variant: RemainderType = ..., gamma: T = ...
    ) -> None: ...

class LevinSidiSAlgorithm(SeriesAcceleration):
    def __init__(
        self,
        series: SeriesBase,
        variant: RemainderType = ...,
        useRecFormulas: bool = ...,
        parameter: T = ...,
    ) -> None: ...

class LubkinWAlgorithm(SeriesAcceleration):
    def __init__(self, series: SeriesBase) -> None: ...

class RhoWynnAlgorithm(SeriesAcceleration):
    def __init__(
        self,
        series: SeriesBase,
        variant: NumeratorType = ...,
        gamma: T = ...,
        RHO: T = ...,
    ) -> None: ...
    def __call__(self, n: K, m: K) -> T: ...

class RichardsonAlgorithm(SeriesAcceleration):
    def __init__(self, series: SeriesBase) -> None: ...

class WenigerAlgorithm(SeriesAcceleration):
    def __init__(self, series: SeriesBase) -> None: ...

class WynnEpsilonAlgorithm(SeriesAcceleration):
    def __init__(self, series: SeriesBase) -> None: ...

class WynnEpsilonAlgorithmTwo(SeriesAcceleration):
    def __init__(self, series: SeriesBase) -> None: ...

class WynnEpsilonAlgorithmThree(SeriesAcceleration):
    def __init__(
        self, series: SeriesBase, epsilon_threshold: T = ...
    ) -> None: ...
