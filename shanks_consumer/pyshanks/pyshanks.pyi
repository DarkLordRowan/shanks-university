"""
pybind11: polymorphic series + all Shanksâ€‘type transformations (double + float_precision)
"""
from __future__ import annotations
import typing
__all__: list[str] = ['AbsSinXMinus2DivPiSeries', 'AbsSinXMinus2DivPiSeriesFP', 'ArcsinX2Series', 'ArcsinX2SeriesFP', 'ArcsinXMinusXSeries', 'ArcsinXMinusXSeriesFP', 'ArcsinXSeries', 'ArcsinXSeriesFP', 'ArcsinhXSeries', 'ArcsinhXSeriesFP', 'ArctanX2Series', 'ArctanX2SeriesFP', 'ArctanX3Series', 'ArctanX3SeriesFP', 'ArctanhX2Series', 'ArctanhX2SeriesFP', 'ArctgXSeries', 'ArctgXSeriesFP', 'ArraySeries', 'ArraySeriesFP', 'ArtanhXSeries', 'ArtanhXSeriesFP', 'BinSeries', 'BinSeriesFP', 'BrezinskiThetaAlgorithm', 'BrezinskiThetaAlgorithmFP', 'ChangWynnAlgorithm', 'ChangWynnAlgorithmFP', 'CiXSeries', 'CiXSeriesFP', 'Cos3xMinus1DivXsquareSeries', 'Cos3xMinus1DivXsquareSeriesFP', 'CosSeries', 'CosSeriesFP', 'CosSqrtXSeries', 'CosSqrtXSeriesFP', 'CosX2Series', 'CosX2SeriesFP', 'CoshSeries', 'CoshSeriesFP', 'DrummondDAlgorithm', 'DrummondDAlgorithmFP', 'EXSeries', 'EXSeriesFP', 'EighthPiMOneThirdSeries', 'EighthPiMOneThirdSeriesFP', 'ErfSeries', 'ErfSeriesFP', 'ExpMCosXSinsinXSeries', 'ExpMCosXSinsinXSeriesFP', 'ExpSeries', 'ExpSeriesFP', 'ExpSquaredErfSeries', 'ExpSquaredErfSeriesFP', 'FP', 'FivePiTwelveSeries', 'FivePiTwelveSeriesFP', 'FordSidi2Algorithm', 'FordSidi2AlgorithmFP', 'FordSidi3Algorithm', 'FordSidi3AlgorithmFP', 'FourArctanSeries', 'FourArctanSeriesFP', 'FourLn2M3Series', 'FourLn2M3SeriesFP', 'GammaSeries', 'GammaSeriesFP', 'HalfAsinTwoXSeries', 'HalfAsinTwoXSeriesFP', 'HalfMinusSinxMultiPi4Series', 'HalfMinusSinxMultiPi4SeriesFP', 'HalfMultiLn1Div2Multi1MinusCosxSeries', 'HalfMultiLn1Div2Multi1MinusCosxSeriesFP', 'IncompleteGammaFuncSeries', 'IncompleteGammaFuncSeriesFP', 'InvSqrt1m4xSeries', 'InvSqrt1m4xSeriesFP', 'Inverse1mxSeries', 'Inverse1mxSeriesFP', 'JaXSeries', 'JaXSeriesFP', 'KXSeries', 'KXSeriesFP', 'LambertWFuncSeries', 'LambertWFuncSeriesFP', 'LevinAlgorithm', 'LevinAlgorithmFP', 'LevinSidiMAlgorithm', 'LevinSidiMAlgorithmFP', 'LevinSidiSAlgorithm', 'LevinSidiSAlgorithmFP', 'Ln13MinusLn7Div7Series', 'Ln13MinusLn7Div7SeriesFP', 'Ln1MinusX2Series', 'Ln1MinusX2SeriesFP', 'Ln1PlusSqrt1PlusXsquareMinusLn2Series', 'Ln1PlusSqrt1PlusXsquareMinusLn2SeriesFP', 'Ln1PlusX3Series', 'Ln1PlusX3SeriesFP', 'Ln1mxSeries', 'Ln1mxSeriesFP', 'Ln1plusXDiv1plusX2Series', 'Ln1plusXDiv1plusX2SeriesFP', 'Ln1px4Series', 'Ln1px4SeriesFP', 'Ln2Series', 'Ln2SeriesFP', 'LnCosxSeries', 'LnCosxSeriesFP', 'LnSinxMinusLnXSeries', 'LnSinxMinusLnXSeriesFP', 'LnXPlusOneXMinusOneHalfedSeries', 'LnXPlusOneXMinusOneHalfedSeriesFP', 'LubkinWAlgorithm', 'LubkinWAlgorithmFP', 'MFact1mxMp1InverseSeries', 'MFact1mxMp1InverseSeriesFP', 'MeanSinhSinSeries', 'MeanSinhSinSeriesFP', 'Minus3Div4OrXMinus3Div4Series', 'Minus3Div4OrXMinus3Div4SeriesFP', 'MinusOneNFactNInNSeries', 'MinusOneNFactNInNSeriesFP', 'MinusOneNedInNSeries', 'MinusOneNedInNSeriesFP', 'MinusOneQuarterSeries', 'MinusOneQuarterSeriesFP', 'MinusThreePlusLn3ThreeDividedTwoPlusTwoLn2Series', 'MinusThreePlusLn3ThreeDividedTwoPlusTwoLn2SeriesFP', 'MinusXMinusPi4OrMinusPi4Series', 'MinusXMinusPi4OrMinusPi4SeriesFP', 'NumeratorType', 'OneDivSqrt2SinXDivSqrt2Series', 'OneDivSqrt2SinXDivSqrt2SeriesFP', 'OneDivTwoMinusXMultiThreePlusXSeries', 'OneDivTwoMinusXMultiThreePlusXSeriesFP', 'OneMinusSqrt1minus4xDiv2xSeries', 'OneMinusSqrt1minus4xDiv2xSeriesFP', 'OneSeries', 'OneSeriesFP', 'OneThirdPiSquaredMNineSeries', 'OneThirdPiSquaredMNineSeriesFP', 'OneTwelfth3x2Pi2Series', 'OneTwelfth3x2Pi2SeriesFP', 'OneTwelfthSeries', 'OneTwelfthSeriesFP', 'Pi3Series', 'Pi3SeriesFP', 'Pi4Series', 'Pi4SeriesFP', 'Pi8CosxSquareMinus1Div3CosxSeries', 'Pi8CosxSquareMinus1Div3CosxSeriesFP', 'PiCubed32Series', 'PiCubed32SeriesFP', 'PiFourMinusLn2HalfedSeries', 'PiFourMinusLn2HalfedSeriesFP', 'PiMinus3pi4AndPiMinusXMinus3pi4Series', 'PiMinus3pi4AndPiMinusXMinus3pi4SeriesFP', 'PiMinusX2Series', 'PiMinusX2SeriesFP', 'PiSeries', 'PiSeriesFP', 'PiSixMinHalfSeries', 'PiSixMinHalfSeriesFP', 'PiSquared6MinusOneSeries', 'PiSquared6MinusOneSeriesFP', 'PiSquaredTwelveSeries', 'PiSquaredTwelveSeriesFP', 'PiXMinusXSquareAndXSquareMinusThreePiXPlusTwoPiSquareSeries', 'PiXMinusXSquareAndXSquareMinusThreePiXPlusTwoPiSquareSeriesFP', 'PiXMultiE_XpiPlusEMinusXpiDividedE_XpiMinusEMinusXpiMinusOneSeries', 'PiXMultiE_XpiPlusEMinusXpiDividedE_XpiMinusEMinusXpiMinusOneSeriesFP', 'RemainderType', 'RichardsonAlgorithm', 'RichardsonAlgorithmFP', 'RiemannZetaFuncSeries', 'RiemannZetaFuncSeriesFP', 'RiemannZetaFuncXmin1DivRiemannZetaFuncXSeries', 'RiemannZetaFuncXmin1DivRiemannZetaFuncXSeriesFP', 'SeriesAcceleration', 'SeriesAccelerationFP', 'SeriesBase', 'SeriesBaseFP', 'SeriesWithLnNumber1', 'SeriesWithLnNumber1FP', 'SeriesWithLnNumber2', 'SeriesWithLnNumber2FP', 'ShanksAlgorithm', 'ShanksAlgorithmFP', 'ShanksTransformAlternatingAlgorithm', 'ShanksTransformAlternatingAlgorithmFP', 'SiXSeries', 'SiXSeriesFP', 'SinSeries', 'SinSeriesFP', 'SinX2Series', 'SinX2SeriesFP', 'SinhSeries', 'SinhSeriesFP', 'SinhX2Series', 'SinhX2SeriesFP', 'Sqrt1plusXMinus1MinusXDiv2Series', 'Sqrt1plusXMinus1MinusXDiv2SeriesFP', 'Sqrt1plusXSeries', 'Sqrt1plusXSeriesFP', 'SqrtOneminusSqrtoneminusxDivXSeries', 'SqrtOneminusSqrtoneminusxDivXSeriesFP', 'TenMinusXSeries', 'TenMinusXSeriesFP', 'ThreeMinusPiSeries', 'ThreeMinusPiSeriesFP', 'TwoArcsinSquareXHalfedSeries', 'TwoArcsinSquareXHalfedSeriesFP', 'TwoDegreeXSeries', 'TwoDegreeXSeriesFP', 'TwoLn2Series', 'TwoLn2SeriesFP', 'WenigerAlgorithm', 'WenigerAlgorithmFP', 'WhynnRhoAlgorithm', 'WhynnRhoAlgorithmFP', 'WynnEpsilon2Algorithm', 'WynnEpsilon2AlgorithmFP', 'WynnEpsilon3Algorithm', 'WynnEpsilon3AlgorithmFP', 'WynnEpsilonAlgorithm', 'WynnEpsilonAlgorithmFP', 'XDiv1minX2Series', 'XDiv1minX2SeriesFP', 'XDiv1minXSeries', 'XDiv1minXSeriesFP', 'XMinSqrtXSeries', 'XMinSqrtXSeriesFP', 'XSeries', 'XSeriesFP', 'XTwelfthX2Pi2Series', 'XTwelfthX2Pi2SeriesFP', 'XTwoSeries', 'XTwoSeriesFP', 'XTwoThroughtSquaresSeries', 'XTwoThroughtSquaresSeriesFP', 'X_1mx_SquaredSeries', 'X_1mx_SquaredSeriesFP', 'XmbJbTwoSeries', 'XmbJbTwoSeriesFP', 'Xsquareplus3DivXsquareplus2multixMinus1Series', 'Xsquareplus3DivXsquareplus2multixMinus1SeriesFP', 'gamma_rho_variant', 'generalized_variant', 'rho_variant', 't_variant', 't_wave_variant', 'u_variant', 'v_variant', 'v_wave_variant']
class AbsSinXMinus2DivPiSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class AbsSinXMinus2DivPiSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class ArcsinX2Series(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class ArcsinX2SeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class ArcsinXMinusXSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class ArcsinXMinusXSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class ArcsinXSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class ArcsinXSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class ArcsinhXSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class ArcsinhXSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class ArctanX2Series(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class ArctanX2SeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class ArctanX3Series(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class ArctanX3SeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class ArctanhX2Series(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class ArctanhX2SeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class ArctgXSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class ArctgXSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class ArraySeries(SeriesBase):
    @typing.overload
    def __init__(self, buffer: typing_extensions.Buffer) -> None:
        """
        Construct from a Python buffer (numpy array/memoryview). Zero-copy when possible.
        """
    @typing.overload
    def __init__(self, sequence: typing.Any) -> None:
        """
        Construct from a Python sequence (will copy).
        """
    def size(self) -> int:
        ...
class ArraySeriesFP(SeriesBaseFP):
    @typing.overload
    def __init__(self, buffer: typing_extensions.Buffer) -> None:
        """
        Construct from a Python buffer (numpy array/memoryview). Will copy/convert elements to arbitrary precision.
        """
    @typing.overload
    def __init__(self, sequence: typing.Any) -> None:
        """
        Construct from a Python sequence (will copy).
        """
    def size(self) -> int:
        ...
class ArtanhXSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class ArtanhXSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class BinSeries(SeriesBase):
    def __init__(self, arg0: float, arg1: float) -> None:
        ...
class BinSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP, arg1: FP) -> None:
        ...
class BrezinskiThetaAlgorithm(SeriesAcceleration):
    def __init__(self, series: SeriesBase) -> None:
        ...
class BrezinskiThetaAlgorithmFP(SeriesAccelerationFP):
    def __init__(self, series: SeriesBaseFP) -> None:
        ...
class ChangWynnAlgorithm(SeriesAcceleration):
    def __init__(self, series: SeriesBase) -> None:
        ...
class ChangWynnAlgorithmFP(SeriesAccelerationFP):
    def __init__(self, series: SeriesBaseFP) -> None:
        ...
class CiXSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class CiXSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class Cos3xMinus1DivXsquareSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class Cos3xMinus1DivXsquareSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class CosSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class CosSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class CosSqrtXSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class CosSqrtXSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class CosX2Series(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class CosX2SeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class CoshSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class CoshSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class DrummondDAlgorithm(SeriesAcceleration):
    def __init__(self, series: SeriesBase, remainder: RemainderType = ..., useRecFormulas: bool = False) -> None:
        ...
class DrummondDAlgorithmFP(SeriesAccelerationFP):
    def __init__(self, series: SeriesBaseFP, remainder: RemainderType = ..., useRecFormulas: bool = False) -> None:
        ...
class EXSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class EXSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class EighthPiMOneThirdSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class EighthPiMOneThirdSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class ErfSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class ErfSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class ExpMCosXSinsinXSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class ExpMCosXSinsinXSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class ExpSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class ExpSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class ExpSquaredErfSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class ExpSquaredErfSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class FP:
    __hash__: typing.ClassVar[None] = None
    def __abs__(self) -> FP:
        ...
    def __add__(self, arg0: FP) -> FP:
        ...
    @typing.overload
    def __eq__(self, arg0: float) -> bool:
        ...
    @typing.overload
    def __eq__(self: float, arg0: FP) -> bool:
        ...
    @typing.overload
    def __eq__(self, arg0: int) -> bool:
        ...
    @typing.overload
    def __eq__(self: int, arg0: FP) -> bool:
        ...
    def __float__(self) -> float:
        ...
    def __format__(self, arg0: str) -> str:
        ...
    @typing.overload
    def __ge__(self, arg0: float) -> bool:
        ...
    @typing.overload
    def __ge__(self: float, arg0: FP) -> bool:
        ...
    @typing.overload
    def __ge__(self, arg0: int) -> bool:
        ...
    @typing.overload
    def __ge__(self: int, arg0: FP) -> bool:
        ...
    def __getstate__(self) -> str:
        ...
    @typing.overload
    def __gt__(self, arg0: float) -> bool:
        ...
    @typing.overload
    def __gt__(self: float, arg0: FP) -> bool:
        ...
    @typing.overload
    def __gt__(self, arg0: int) -> bool:
        ...
    @typing.overload
    def __gt__(self: int, arg0: FP) -> bool:
        ...
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, d: float) -> None:
        ...
    @typing.overload
    def __init__(self, s: str) -> None:
        ...
    @typing.overload
    def __le__(self, arg0: float) -> bool:
        ...
    @typing.overload
    def __le__(self: float, arg0: FP) -> bool:
        ...
    @typing.overload
    def __le__(self, arg0: int) -> bool:
        ...
    @typing.overload
    def __le__(self: int, arg0: FP) -> bool:
        ...
    @typing.overload
    def __lt__(self, arg0: float) -> bool:
        ...
    @typing.overload
    def __lt__(self: float, arg0: FP) -> bool:
        ...
    @typing.overload
    def __lt__(self, arg0: int) -> bool:
        ...
    @typing.overload
    def __lt__(self: int, arg0: FP) -> bool:
        ...
    def __mul__(self, arg0: FP) -> FP:
        ...
    @typing.overload
    def __ne__(self, arg0: float) -> bool:
        ...
    @typing.overload
    def __ne__(self: float, arg0: FP) -> bool:
        ...
    @typing.overload
    def __ne__(self, arg0: int) -> bool:
        ...
    @typing.overload
    def __ne__(self: int, arg0: FP) -> bool:
        ...
    def __neg__(self) -> FP:
        ...
    def __pos__(self) -> FP:
        ...
    def __radd__(self, arg0: FP) -> FP:
        ...
    def __repr__(self) -> str:
        ...
    def __rmul__(self, arg0: FP) -> FP:
        ...
    def __rsub__(self, arg0: FP) -> FP:
        ...
    def __rtruediv__(self, arg0: FP) -> FP:
        ...
    def __setstate__(self, arg0: str) -> None:
        ...
    def __str__(self) -> str:
        ...
    def __sub__(self, arg0: FP) -> FP:
        ...
    def __truediv__(self, arg0: FP) -> FP:
        ...
class FivePiTwelveSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class FivePiTwelveSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class FordSidi2Algorithm(SeriesAcceleration):
    def __init__(self, series: SeriesBase) -> None:
        ...
class FordSidi2AlgorithmFP(SeriesAccelerationFP):
    def __init__(self, series: SeriesBaseFP) -> None:
        ...
class FordSidi3Algorithm(SeriesAcceleration):
    def __init__(self, series: SeriesBase) -> None:
        ...
class FordSidi3AlgorithmFP(SeriesAccelerationFP):
    def __init__(self, series: SeriesBaseFP) -> None:
        ...
class FourArctanSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class FourArctanSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class FourLn2M3Series(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class FourLn2M3SeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class GammaSeries(SeriesBase):
    def __init__(self, arg0: float, arg1: float) -> None:
        ...
class GammaSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP, arg1: FP) -> None:
        ...
class HalfAsinTwoXSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class HalfAsinTwoXSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class HalfMinusSinxMultiPi4Series(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class HalfMinusSinxMultiPi4SeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class HalfMultiLn1Div2Multi1MinusCosxSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class HalfMultiLn1Div2Multi1MinusCosxSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class IncompleteGammaFuncSeries(SeriesBase):
    def __init__(self, arg0: float, arg1: float) -> None:
        ...
class IncompleteGammaFuncSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP, arg1: FP) -> None:
        ...
class InvSqrt1m4xSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class InvSqrt1m4xSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class Inverse1mxSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class Inverse1mxSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class JaXSeries(SeriesBase):
    def __init__(self, arg0: float, arg1: float) -> None:
        ...
class JaXSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP, arg1: FP) -> None:
        ...
class KXSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class KXSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class LambertWFuncSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class LambertWFuncSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class LevinAlgorithm(SeriesAcceleration):
    def __init__(self, series: SeriesBase, remainder: RemainderType = ..., useRecFormulas: bool = False, beta: float = 1.0) -> None:
        ...
class LevinAlgorithmFP(SeriesAccelerationFP):
    def __init__(self, series: SeriesBaseFP, remainder: RemainderType = ..., useRecFormulas: bool = False, beta: FP = ...) -> None:
        ...
class LevinSidiMAlgorithm(SeriesAcceleration):
    def __init__(self, series: SeriesBase, remainder: RemainderType = ..., gamma: float = 10.0) -> None:
        ...
class LevinSidiMAlgorithmFP(SeriesAccelerationFP):
    def __init__(self, series: SeriesBaseFP, remainder: RemainderType = ..., gamma: FP = ...) -> None:
        ...
class LevinSidiSAlgorithm(SeriesAcceleration):
    def __init__(self, series: SeriesBase, remainder: RemainderType = ..., useRecFormulas: bool = False, parameter: float = 1.0) -> None:
        ...
class LevinSidiSAlgorithmFP(SeriesAccelerationFP):
    def __init__(self, series: SeriesBaseFP, remainder: RemainderType = ..., useRecFormulas: bool = False, parameter: FP = ...) -> None:
        ...
class Ln13MinusLn7Div7Series(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class Ln13MinusLn7Div7SeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class Ln1MinusX2Series(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class Ln1MinusX2SeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class Ln1PlusSqrt1PlusXsquareMinusLn2Series(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class Ln1PlusSqrt1PlusXsquareMinusLn2SeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class Ln1PlusX3Series(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class Ln1PlusX3SeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class Ln1mxSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class Ln1mxSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class Ln1plusXDiv1plusX2Series(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class Ln1plusXDiv1plusX2SeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class Ln1px4Series(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class Ln1px4SeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class Ln2Series(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class Ln2SeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class LnCosxSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class LnCosxSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class LnSinxMinusLnXSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class LnSinxMinusLnXSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class LnXPlusOneXMinusOneHalfedSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class LnXPlusOneXMinusOneHalfedSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class LubkinWAlgorithm(SeriesAcceleration):
    def __init__(self, series: SeriesBase) -> None:
        ...
class LubkinWAlgorithmFP(SeriesAccelerationFP):
    def __init__(self, series: SeriesBaseFP) -> None:
        ...
class MFact1mxMp1InverseSeries(SeriesBase):
    def __init__(self, arg0: float, arg1: int) -> None:
        ...
class MFact1mxMp1InverseSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP, arg1: int) -> None:
        ...
class MeanSinhSinSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class MeanSinhSinSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class Minus3Div4OrXMinus3Div4Series(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class Minus3Div4OrXMinus3Div4SeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class MinusOneNFactNInNSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class MinusOneNFactNInNSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class MinusOneNedInNSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class MinusOneNedInNSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class MinusOneQuarterSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class MinusOneQuarterSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class MinusThreePlusLn3ThreeDividedTwoPlusTwoLn2Series(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class MinusThreePlusLn3ThreeDividedTwoPlusTwoLn2SeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class MinusXMinusPi4OrMinusPi4Series(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class MinusXMinusPi4OrMinusPi4SeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class NumeratorType:
    """
    Members:

      rho_variant

      generalized_variant

      gamma_rho_variant
    """
    __members__: typing.ClassVar[dict[str, NumeratorType]]  # value = {'rho_variant': <NumeratorType.rho_variant: 0>, 'generalized_variant': <NumeratorType.generalized_variant: 1>, 'gamma_rho_variant': <NumeratorType.gamma_rho_variant: 2>}
    gamma_rho_variant: typing.ClassVar[NumeratorType]  # value = <NumeratorType.gamma_rho_variant: 2>
    generalized_variant: typing.ClassVar[NumeratorType]  # value = <NumeratorType.generalized_variant: 1>
    rho_variant: typing.ClassVar[NumeratorType]  # value = <NumeratorType.rho_variant: 0>
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: int) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __repr__(self) -> str:
        ...
    def __setstate__(self, state: int) -> None:
        ...
    def __str__(self) -> str:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class OneDivSqrt2SinXDivSqrt2Series(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class OneDivSqrt2SinXDivSqrt2SeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class OneDivTwoMinusXMultiThreePlusXSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class OneDivTwoMinusXMultiThreePlusXSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class OneMinusSqrt1minus4xDiv2xSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class OneMinusSqrt1minus4xDiv2xSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class OneSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class OneSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class OneThirdPiSquaredMNineSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class OneThirdPiSquaredMNineSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class OneTwelfth3x2Pi2Series(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class OneTwelfth3x2Pi2SeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class OneTwelfthSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class OneTwelfthSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class Pi3Series(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class Pi3SeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class Pi4Series(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class Pi4SeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class Pi8CosxSquareMinus1Div3CosxSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class Pi8CosxSquareMinus1Div3CosxSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class PiCubed32Series(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class PiCubed32SeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class PiFourMinusLn2HalfedSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class PiFourMinusLn2HalfedSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class PiMinus3pi4AndPiMinusXMinus3pi4Series(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class PiMinus3pi4AndPiMinusXMinus3pi4SeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class PiMinusX2Series(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class PiMinusX2SeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class PiSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class PiSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class PiSixMinHalfSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class PiSixMinHalfSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class PiSquared6MinusOneSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class PiSquared6MinusOneSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class PiSquaredTwelveSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class PiSquaredTwelveSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class PiXMinusXSquareAndXSquareMinusThreePiXPlusTwoPiSquareSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class PiXMinusXSquareAndXSquareMinusThreePiXPlusTwoPiSquareSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class PiXMultiE_XpiPlusEMinusXpiDividedE_XpiMinusEMinusXpiMinusOneSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class PiXMultiE_XpiPlusEMinusXpiDividedE_XpiMinusEMinusXpiMinusOneSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class RemainderType:
    """
    Members:

      u_variant

      t_variant

      v_variant

      t_wave_variant

      v_wave_variant
    """
    __members__: typing.ClassVar[dict[str, RemainderType]]  # value = {'u_variant': <RemainderType.u_variant: 0>, 't_variant': <RemainderType.t_variant: 1>, 'v_variant': <RemainderType.v_variant: 2>, 't_wave_variant': <RemainderType.t_wave_variant: 3>, 'v_wave_variant': <RemainderType.v_wave_variant: 4>}
    t_variant: typing.ClassVar[RemainderType]  # value = <RemainderType.t_variant: 1>
    t_wave_variant: typing.ClassVar[RemainderType]  # value = <RemainderType.t_wave_variant: 3>
    u_variant: typing.ClassVar[RemainderType]  # value = <RemainderType.u_variant: 0>
    v_variant: typing.ClassVar[RemainderType]  # value = <RemainderType.v_variant: 2>
    v_wave_variant: typing.ClassVar[RemainderType]  # value = <RemainderType.v_wave_variant: 4>
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: int) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __repr__(self) -> str:
        ...
    def __setstate__(self, state: int) -> None:
        ...
    def __str__(self) -> str:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class RichardsonAlgorithm(SeriesAcceleration):
    def __init__(self, series: SeriesBase) -> None:
        ...
class RichardsonAlgorithmFP(SeriesAccelerationFP):
    def __init__(self, series: SeriesBaseFP) -> None:
        ...
class RiemannZetaFuncSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class RiemannZetaFuncSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class RiemannZetaFuncXmin1DivRiemannZetaFuncXSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class RiemannZetaFuncXmin1DivRiemannZetaFuncXSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class SeriesAcceleration:
    def __call__(self, arg0: int, arg1: int) -> float:
        ...
class SeriesAccelerationFP:
    def __call__(self, arg0: int, arg1: int) -> FP:
        ...
class SeriesBase:
    def S_n(self, arg0: int) -> float:
        ...
    def __call__(self, arg0: int) -> float:
        ...
    def get_sum(self) -> float:
        ...
    def get_x(self) -> float:
        ...
class SeriesBaseFP:
    def S_n(self, arg0: int) -> FP:
        ...
    def __call__(self, arg0: int) -> FP:
        ...
    def get_sum(self) -> FP:
        ...
    def get_x(self) -> FP:
        ...
class SeriesWithLnNumber1(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class SeriesWithLnNumber1FP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class SeriesWithLnNumber2(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class SeriesWithLnNumber2FP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class ShanksAlgorithm(SeriesAcceleration):
    def __init__(self, series: SeriesBase) -> None:
        ...
class ShanksAlgorithmFP(SeriesAccelerationFP):
    def __init__(self, series: SeriesBaseFP) -> None:
        ...
class ShanksTransformAlternatingAlgorithm(SeriesAcceleration):
    def __init__(self, series: SeriesBase) -> None:
        ...
class ShanksTransformAlternatingAlgorithmFP(SeriesAccelerationFP):
    def __init__(self, series: SeriesBaseFP) -> None:
        ...
class SiXSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class SiXSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class SinSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class SinSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class SinX2Series(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class SinX2SeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class SinhSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class SinhSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class SinhX2Series(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class SinhX2SeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class Sqrt1plusXMinus1MinusXDiv2Series(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class Sqrt1plusXMinus1MinusXDiv2SeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class Sqrt1plusXSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class Sqrt1plusXSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class SqrtOneminusSqrtoneminusxDivXSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class SqrtOneminusSqrtoneminusxDivXSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class TenMinusXSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class TenMinusXSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class ThreeMinusPiSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class ThreeMinusPiSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class TwoArcsinSquareXHalfedSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class TwoArcsinSquareXHalfedSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class TwoDegreeXSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class TwoDegreeXSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class TwoLn2Series(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class TwoLn2SeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class WenigerAlgorithm(SeriesAcceleration):
    def __init__(self, series: SeriesBase) -> None:
        ...
class WenigerAlgorithmFP(SeriesAccelerationFP):
    def __init__(self, series: SeriesBaseFP) -> None:
        ...
class WhynnRhoAlgorithm(SeriesAcceleration):
    def __init__(self, series: SeriesBase, numerator: NumeratorType = ..., gamma: float = 1.0, RHO: float = 0.0) -> None:
        ...
class WhynnRhoAlgorithmFP(SeriesAccelerationFP):
    def __init__(self, series: SeriesBaseFP, numerator: NumeratorType = ..., gamma: FP = ..., RHO: FP = ...) -> None:
        ...
class WynnEpsilon2Algorithm(SeriesAcceleration):
    def __init__(self, series: SeriesBase) -> None:
        ...
class WynnEpsilon2AlgorithmFP(SeriesAccelerationFP):
    def __init__(self, series: SeriesBaseFP) -> None:
        ...
class WynnEpsilon3Algorithm(SeriesAcceleration):
    def __init__(self, series: SeriesBase, epsilon_threshold: float = 0.001) -> None:
        ...
class WynnEpsilon3AlgorithmFP(SeriesAccelerationFP):
    def __init__(self, series: SeriesBaseFP, epsilon_threshold: FP = ...) -> None:
        ...
class WynnEpsilonAlgorithm(SeriesAcceleration):
    def __init__(self, series: SeriesBase) -> None:
        ...
class WynnEpsilonAlgorithmFP(SeriesAccelerationFP):
    def __init__(self, series: SeriesBaseFP) -> None:
        ...
class XDiv1minX2Series(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class XDiv1minX2SeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class XDiv1minXSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class XDiv1minXSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class XMinSqrtXSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class XMinSqrtXSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class XSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class XSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class XTwelfthX2Pi2Series(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class XTwelfthX2Pi2SeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class XTwoSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class XTwoSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class XTwoThroughtSquaresSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class XTwoThroughtSquaresSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class X_1mx_SquaredSeries(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class X_1mx_SquaredSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
class XmbJbTwoSeries(SeriesBase):
    def __init__(self, arg0: float, arg1: int) -> None:
        ...
class XmbJbTwoSeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP, arg1: int) -> None:
        ...
class Xsquareplus3DivXsquareplus2multixMinus1Series(SeriesBase):
    def __init__(self, arg0: float) -> None:
        ...
class Xsquareplus3DivXsquareplus2multixMinus1SeriesFP(SeriesBaseFP):
    def __init__(self, arg0: FP) -> None:
        ...
gamma_rho_variant: NumeratorType  # value = <NumeratorType.gamma_rho_variant: 2>
generalized_variant: NumeratorType  # value = <NumeratorType.generalized_variant: 1>
rho_variant: NumeratorType  # value = <NumeratorType.rho_variant: 0>
t_variant: RemainderType  # value = <RemainderType.t_variant: 1>
t_wave_variant: RemainderType  # value = <RemainderType.t_wave_variant: 3>
u_variant: RemainderType  # value = <RemainderType.u_variant: 0>
v_variant: RemainderType  # value = <RemainderType.v_variant: 2>
v_wave_variant: RemainderType  # value = <RemainderType.v_wave_variant: 4>
